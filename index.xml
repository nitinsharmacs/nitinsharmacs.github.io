<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>bitPhile</title>
      <link>https://nitinsharmacs.github.io</link>
      <description>Last 10 notes on bitPhile</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>high-level-graphs</title>
    <link>https://nitinsharmacs.github.io/notes/tech/dask/notebooks/high-level-graphs</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/dask/notebooks/high-level-graphs</guid>
    <description>from dask.highlevelgraph import HighLevelGraph import dask from dask.threaded import get def add(x, y): return x + y def square(x): return x ** 2 layers = { &#039;add&#039;: { (&#039;add&#039;, ...</description>
    <pubDate>Fri, 25 Oct 2024 12:34:30 GMT</pubDate>
  </item><item>
    <title>debugging-in-dask</title>
    <link>https://nitinsharmacs.github.io/notes/tech/dask/notebooks/debugging-in-dask</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/dask/notebooks/debugging-in-dask</guid>
    <description>from dask.distributed import Client, print client = Client() client Client Client-859821fa-9297-11ef-8a5c-acde48001122 &lt;tr&gt; &lt;td style=&quot;text-align: left;&quot;&gt;&lt;strong&gt;Connection ...</description>
    <pubDate>Fri, 25 Oct 2024 12:34:29 GMT</pubDate>
  </item><item>
    <title>visualize-task-graphs</title>
    <link>https://nitinsharmacs.github.io/notes/tech/dask/notebooks/visualize-task-graphs</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/dask/notebooks/visualize-task-graphs</guid>
    <description>import dask.array as da import dask x = da.ones((15, 15), chunks=(5, 5)) y = x.sum() dask.visualize(y) y.visualize(rankdir=&#039;BT&#039;) dask.visualize(y, optimize_graph=True) ...</description>
    <pubDate>Fri, 25 Oct 2024 12:34:29 GMT</pubDate>
  </item><item>
    <title>task-graphs</title>
    <link>https://nitinsharmacs.github.io/notes/tech/dask/notebooks/task-graphs</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/dask/notebooks/task-graphs</guid>
    <description>from dask.threaded import get def add(a, b): return a + b dsk = { &#039;x&#039;: 3, &#039;y&#039;: 2, &#039;z&#039;: (add, &#039;x&#039;, &#039;y&#039;) } get(dsk, &#039;z&#039;) ...</description>
    <pubDate>Fri, 25 Oct 2024 12:34:28 GMT</pubDate>
  </item><item>
    <title>visualize-task-graphs</title>
    <link>https://nitinsharmacs.github.io/notes/tech/dask/visualize-task-graphs</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/dask/visualize-task-graphs</guid>
    <description>Visualize Task Graphs Task graph can be visualized using dask.visualize and .visualize on the collections. High level task graphs Below code snippet shows High level task graphs visualization.</description>
    <pubDate>Fri, 25 Oct 2024 09:22:00 GMT</pubDate>
  </item><item>
    <title>high-level-graph</title>
    <link>https://nitinsharmacs.github.io/notes/tech/dask/high-level-graph</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/dask/high-level-graph</guid>
    <description>High Level Graphs Dask collections operations are structurally defined as a high level graph of tasks and sub graphs. They can be used for visualizations and high level optimizations.</description>
    <pubDate>Tue, 22 Oct 2024 18:06:00 GMT</pubDate>
  </item><item>
    <title>task-graphs</title>
    <link>https://nitinsharmacs.github.io/notes/tech/dask/task-graphs</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/dask/task-graphs</guid>
    <description>Task Graphs Dask internally converts the algorithms into a graph format made of python dicts, tuples, and functions. For example, dsk = { &#039;x&#039;: 1, &#039;y&#039;: 2, &#039;z&#039;: (add, &#039;x&#039;, &#039;y&#039;) } A key can be a str, bytes, float, or a tuple.</description>
    <pubDate>Sun, 20 Oct 2024 13:02:00 GMT</pubDate>
  </item><item>
    <title>client</title>
    <link>https://nitinsharmacs.github.io/notes/tech/dask/client</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/dask/client</guid>
    <description>Client Dask client for the computation. from dask.distributed import Client client = Client(cluster) # Or scheduler_ip = &quot;tcp://IP&quot; client = Client(scheduler_ip).</description>
    <pubDate>Thu, 17 Oct 2024 13:15:00 GMT</pubDate>
  </item><item>
    <title>internal-design</title>
    <link>https://nitinsharmacs.github.io/notes/tech/dask/notebooks/internal-design</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/dask/notebooks/internal-design</guid>
    <description>import dask.array as da import numpy as np Dask array as graph a = da.arange(15, chunks=(5,)) a &lt;tr&gt; &lt;th&gt; Bytes &lt;/th&gt; &lt;td&gt; 120 B &lt;/td&gt; &lt;td&gt; ...</description>
    <pubDate>Wed, 16 Oct 2024 18:12:12 GMT</pubDate>
  </item><item>
    <title>chunks</title>
    <link>https://nitinsharmacs.github.io/notes/tech/dask/notebooks/chunks</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/dask/notebooks/chunks</guid>
    <description>Objectives Understand chunking in dask array Different ways of chunking import dask.array as da import numpy as np Chunked Dask array a = da.arange(6*6).reshape((6, 6)) a &lt;tr&gt; ...</description>
    <pubDate>Wed, 16 Oct 2024 18:12:12 GMT</pubDate>
  </item>
    </channel>
  </rss>