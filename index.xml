<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>bitPhile</title>
      <link>https://nitinsharmacs.github.io</link>
      <description>Last 10 notes on bitPhile</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>diagnostics-local</title>
    <link>https://nitinsharmacs.github.io/notes/tech/dask/notebooks/diagnostics-local</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/dask/notebooks/diagnostics-local</guid>
    <description>import dask.array as da from dask.diagnostics import ProgressBar a = da.arange(10000, chunks=(100)) a &lt;tr&gt; &lt;th&gt; Bytes &lt;/th&gt; &lt;td&gt; 78.12 kiB &lt;/td&gt; ...</description>
    <pubDate>Mon, 09 Dec 2024 18:14:37 GMT</pubDate>
  </item><item>
    <title>exploration</title>
    <link>https://nitinsharmacs.github.io/notes/tech/dask/notebooks/exploration</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/dask/notebooks/exploration</guid>
    <description>import dask.array as da import dask x = da.ones(1000, chunks=(100,)).sum() dask.visualize(x) .</description>
    <pubDate>Mon, 09 Dec 2024 18:14:36 GMT</pubDate>
  </item><item>
    <title>ordering</title>
    <link>https://nitinsharmacs.github.io/notes/tech/dask/notebooks/ordering</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/dask/notebooks/ordering</guid>
    <description>import dask.array as da import dask from dask.distributed import Client, performance_report x = da.zeros((12500, 10000), chunks=(&#039;10MB&#039;, -1)) x &lt;tr&gt; &lt;th&gt; ...</description>
    <pubDate>Mon, 09 Dec 2024 18:14:36 GMT</pubDate>
  </item><item>
    <title>optimization-custom-graphs</title>
    <link>https://nitinsharmacs.github.io/notes/tech/dask/notebooks/optimization-custom-graphs</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/dask/notebooks/optimization-custom-graphs</guid>
    <description>import dask from dask.distributed import Client import dask.array as da import xarray as xr import numpy as np from dask.threaded import get from dask.highlevelgraph import HighLevelGraph ...</description>
    <pubDate>Mon, 09 Dec 2024 18:14:35 GMT</pubDate>
  </item><item>
    <title>dask-fuse</title>
    <link>https://nitinsharmacs.github.io/notes/tech/dask/notebooks/dask-fuse</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/dask/notebooks/dask-fuse</guid>
    <description>Observations HighLevelGraphs How to get the HighLevelGraph: res.data.dask or res.__dask_graph__() to get the graph in layers format. res.data.dask.visualize() or res.__dask_graph__().visualize() to get in graph format.</description>
    <pubDate>Mon, 09 Dec 2024 18:14:35 GMT</pubDate>
  </item><item>
    <title>stages-of-computation</title>
    <link>https://nitinsharmacs.github.io/notes/tech/dask/notebooks/stages-of-computation</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/dask/notebooks/stages-of-computation</guid>
    <description>import dask from dask.distributed import Client import dask.array as da import numpy as np %load_ext snakeviz client = Client(&quot;tcp://172.20.104.205:8786&quot;) client ...</description>
    <pubDate>Mon, 09 Dec 2024 18:14:34 GMT</pubDate>
  </item><item>
    <title>simple-module-file</title>
    <link>https://nitinsharmacs.github.io/notes/tech/environment-modules/simple-module-file</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/environment-modules/simple-module-file</guid>
    <description>Write a module file A module files are written using TCL (Tool Command Language) and is interpreted by modulecmd.tcl. A simple example of module file which adds a path to environment variable PATH.</description>
    <pubDate>Mon, 09 Dec 2024 17:42:00 GMT</pubDate>
  </item><item>
    <title>installing-modules</title>
    <link>https://nitinsharmacs.github.io/notes/tech/environment-modules/installing-modules</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/environment-modules/installing-modules</guid>
    <description>To install module from source, we need to download tarball of the required version, unpack it and install using make. Different releases of module can be find here.</description>
    <pubDate>Sun, 08 Dec 2024 16:02:00 GMT</pubDate>
  </item><item>
    <title>persist</title>
    <link>https://nitinsharmacs.github.io/notes/tech/dask/persist</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/dask/persist</guid>
    <description>Persist persist starts the computation and stores the results in memory. However, it is different from compute in a way where persist gives back dask object with results being computed or computed and stored on distributed cluster memory.</description>
    <pubDate>Wed, 06 Nov 2024 05:52:00 GMT</pubDate>
  </item><item>
    <title>dask-dashboard</title>
    <link>https://nitinsharmacs.github.io/notes/tech/dask/dask-dashboard</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/dask/dask-dashboard</guid>
    <description>Dask Dashboard Dask dashboard provides details of the distributed computations, workers, and cluster resource usages. Dashboard provides different diagnosis plots, some of them are: Bytes stored and Bytes per worker Task processing/CPU utilization/Occupancy/Data Transfer Task Stream Progress Bytes stored and Bytes per worker These plots provides overall memory utilization of the cluster and individual workers.</description>
    <pubDate>Mon, 04 Nov 2024 15:47:00 GMT</pubDate>
  </item>
    </channel>
  </rss>