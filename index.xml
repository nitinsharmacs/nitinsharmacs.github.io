<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>bitPhile</title>
      <link>https://nitinsharmacs.github.io</link>
      <description>Last 10 notes on bitPhile</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>client</title>
    <link>https://nitinsharmacs.github.io/notes/tech/dask/client</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/dask/client</guid>
    <description>Client Dask client for the computation. from dask.distributed import Client client = Client(cluster) # Or scheduler_ip = &quot;tcp://IP&quot; client = Client(scheduler_ip).</description>
    <pubDate>Thu, 17 Oct 2024 13:15:00 GMT</pubDate>
  </item><item>
    <title>internal-design</title>
    <link>https://nitinsharmacs.github.io/notes/tech/dask/notebooks/internal-design</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/dask/notebooks/internal-design</guid>
    <description>import dask.array as da import numpy as np Dask array as graph a = da.arange(15, chunks=(5,)) a &lt;tr&gt; &lt;th&gt; Bytes &lt;/th&gt; &lt;td&gt; 120 B &lt;/td&gt; &lt;td&gt; ...</description>
    <pubDate>Wed, 16 Oct 2024 18:12:12 GMT</pubDate>
  </item><item>
    <title>chunks</title>
    <link>https://nitinsharmacs.github.io/notes/tech/dask/notebooks/chunks</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/dask/notebooks/chunks</guid>
    <description>Objectives Understand chunking in dask array Different ways of chunking import dask.array as da import numpy as np Chunked Dask array a = da.arange(6*6).reshape((6, 6)) a &lt;tr&gt; ...</description>
    <pubDate>Wed, 16 Oct 2024 18:12:12 GMT</pubDate>
  </item><item>
    <title>delayed</title>
    <link>https://nitinsharmacs.github.io/notes/tech/dask/notebooks/delayed</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/dask/notebooks/delayed</guid>
    <description>import dask from dask.graph_manipulation import bind import graphviz Adding task with side effects DATA = [] @dask.delayed def inc(x): return x + 1 @dask.delayed def add_data(x): ...</description>
    <pubDate>Wed, 16 Oct 2024 18:12:11 GMT</pubDate>
  </item><item>
    <title>reshape</title>
    <link>https://nitinsharmacs.github.io/notes/tech/dask/reshape</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/dask/reshape</guid>
    <description>Reshape Dask array can be reshaped using dask.array.reshape method. a = da.ones((3, 4), chunks=(2, 2)) a.reshape((3, 2, 2)) Reshape in dask array is not similar as numpy reshape because dask arrays have chunks and doing reshaping requires some re-alignment or re-chunking of the chunks.</description>
    <pubDate>Wed, 09 Oct 2024 14:03:00 GMT</pubDate>
  </item><item>
    <title>rechunk</title>
    <link>https://nitinsharmacs.github.io/notes/tech/dask/rechunk</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/dask/rechunk</guid>
    <description>Rechunk Dask arrays can be rechunked using dask.array.rechunk method using any of the chunk format as described here. dask.array.ones((3, 4), chunks=(2, 2)).rechunk(((1, 1, 1), (2, 2))).</description>
    <pubDate>Wed, 09 Oct 2024 13:23:00 GMT</pubDate>
  </item><item>
    <title>ogrid</title>
    <link>https://nitinsharmacs.github.io/notes/tech/numpy/ogrid</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/numpy/ogrid</guid>
    <description>np.ogrid The way it is different than np.mgrid is that it does not include all the elements required for the grid. It returns 1D arrays and rest of the things lie on the numpy broadcasting.</description>
    <pubDate>Mon, 07 Oct 2024 16:28:00 GMT</pubDate>
  </item><item>
    <title>grids-in-numpy</title>
    <link>https://nitinsharmacs.github.io/notes/tech/numpy/notebook/grids-in-numpy</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/numpy/notebook/grids-in-numpy</guid>
    <description>Grids in numpy import numpy as np import matplotlib.pyplot as plt %matplotlib inline a = np.array([3, 1, 2, 5, 6, 7]) b = np.array(a[::-1]) x, y = np.meshgrid(a, b) x, y (array([[3, ...</description>
    <pubDate>Fri, 04 Oct 2024 12:44:27 GMT</pubDate>
  </item><item>
    <title>mgrid</title>
    <link>https://nitinsharmacs.github.io/notes/tech/numpy/mgrid</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/numpy/mgrid</guid>
    <description>numpy.mgrid numpy.mgridcan be used to create meshgrid by using slices. np.mgrid[0:5, 0:5] array([[[0, 0, 0, 0, 0], [1, 1, 1, 1, 1], [2, 2, 2, 2, 2], [3, 3, 3, 3, 3], [4, 4, 4, 4, 4]], [[0, 1, 2, 3, 4], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4]]]) This is equivalent to, np.meshgrid(np.arange(5), np.arange(5), indexing=&quot;ij&quot;) [array([[0, 0, 0, 0, 0], [1, 1, 1, 1, 1], [2, 2, 2, 2, 2], [3, 3, 3, 3, 3], [4, 4, 4, 4, 4]]), array([[0, 1, 2, 3, 4], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4]])] np.mgrid uses matrix indexing system.</description>
    <pubDate>Fri, 04 Oct 2024 11:42:00 GMT</pubDate>
  </item><item>
    <title>dump</title>
    <link>https://nitinsharmacs.github.io/notes/tech/matplotlib/dump</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/matplotlib/dump</guid>
    <description>plt.imshow( output, cmap=&quot;gray&quot;, extent=[np.min(x), np.max(x), np.min(y), np.max(y)] ).</description>
    <pubDate>Fri, 04 Oct 2024 11:17:00 GMT</pubDate>
  </item>
    </channel>
  </rss>