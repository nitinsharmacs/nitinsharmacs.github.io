<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>bitPhile</title>
      <link>https://nitinsharmacs.github.io</link>
      <description>Last 10 notes on bitPhile</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>git-stash</title>
    <link>https://nitinsharmacs.github.io/notes/tech/git/git-stash</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/git/git-stash</guid>
    <description>git stash Stash is used to temporarily shift the changes made to working repository so that something else can be done there. Stash saves changes for tracked files and indexed files by default.</description>
    <pubDate>Mon, 20 Jan 2025 06:13:00 GMT</pubDate>
  </item><item>
    <title>queue</title>
    <link>https://nitinsharmacs.github.io/notes/tech/CPython/multiprocessing/queue</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/CPython/multiprocessing/queue</guid>
    <description>Queue A queue is process shared queue implementation. It is used as a way to pass information among the processes. from multiprocessing import Queue from threading import Thread q = Queue() def worker(): while True: value = q.get() print(f&quot;Got some value {value}&quot;) t = Thread(target=worker) t.start() q.put(1) &quot;Got some value 1&quot; q.put(&quot;something&quot;) &quot;Got some value something&quot; q.get method blocks until it gets a value.</description>
    <pubDate>Wed, 08 Jan 2025 16:59:00 GMT</pubDate>
  </item><item>
    <title>run-slurm-script</title>
    <link>https://nitinsharmacs.github.io/notes/tech/slurm/run-slurm-script</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/slurm/run-slurm-script</guid>
    <description>Slurm Script A slurm script is used to run a set of slurm job steps. It can be submitted using sbatch command. Let’s try running following slurm script.</description>
    <pubDate>Mon, 06 Jan 2025 10:19:00 GMT</pubDate>
  </item><item>
    <title>slurm-overview</title>
    <link>https://nitinsharmacs.github.io/notes/tech/slurm/slurm-overview</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/slurm/slurm-overview</guid>
    <description>Slurm Slurm is a fault-tolerant, highly scalable cluster management and job scheduling system for large and small linux clusters. As a workload manager, it handles allocation of resources, scheduling and monitoring jobs.</description>
    <pubDate>Mon, 06 Jan 2025 07:45:00 GMT</pubDate>
  </item><item>
    <title>dunder-functions</title>
    <link>https://nitinsharmacs.github.io/notes/tech/CPython/dunder-functions</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/CPython/dunder-functions</guid>
    <description>Dunder Functions Dunder word is taken by composing “Double” and “Underscore”. So, dunder functions are functions that start and end with double underscores.</description>
    <pubDate>Mon, 16 Dec 2024 15:01:00 GMT</pubDate>
  </item><item>
    <title>attributes-vs-properties</title>
    <link>https://nitinsharmacs.github.io/notes/tech/CPython/attributes-vs-properties</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/CPython/attributes-vs-properties</guid>
    <description>Attributes Vs Properties class Person(): def __init__(self): self._name = &quot;test&quot; @property def name(self): return self._name @name.setter def name(self, value): ...</description>
    <pubDate>Thu, 12 Dec 2024 16:18:00 GMT</pubDate>
  </item><item>
    <title>diagnostics-local</title>
    <link>https://nitinsharmacs.github.io/notes/tech/dask/notebooks/diagnostics-local</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/dask/notebooks/diagnostics-local</guid>
    <description>import dask.array as da from dask.diagnostics import ProgressBar a = da.arange(10000, chunks=(100)) a &lt;tr&gt; &lt;th&gt; Bytes &lt;/th&gt; &lt;td&gt; 78.12 kiB &lt;/td&gt; ...</description>
    <pubDate>Mon, 09 Dec 2024 18:14:37 GMT</pubDate>
  </item><item>
    <title>exploration</title>
    <link>https://nitinsharmacs.github.io/notes/tech/dask/notebooks/exploration</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/dask/notebooks/exploration</guid>
    <description>import dask.array as da import dask x = da.ones(1000, chunks=(100,)).sum() dask.visualize(x) .</description>
    <pubDate>Mon, 09 Dec 2024 18:14:36 GMT</pubDate>
  </item><item>
    <title>ordering</title>
    <link>https://nitinsharmacs.github.io/notes/tech/dask/notebooks/ordering</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/dask/notebooks/ordering</guid>
    <description>import dask.array as da import dask from dask.distributed import Client, performance_report x = da.zeros((12500, 10000), chunks=(&#039;10MB&#039;, -1)) x &lt;tr&gt; &lt;th&gt; ...</description>
    <pubDate>Mon, 09 Dec 2024 18:14:36 GMT</pubDate>
  </item><item>
    <title>optimization-custom-graphs</title>
    <link>https://nitinsharmacs.github.io/notes/tech/dask/notebooks/optimization-custom-graphs</link>
    <guid>https://nitinsharmacs.github.io/notes/tech/dask/notebooks/optimization-custom-graphs</guid>
    <description>import dask from dask.distributed import Client import dask.array as da import xarray as xr import numpy as np from dask.threaded import get from dask.highlevelgraph import HighLevelGraph ...</description>
    <pubDate>Mon, 09 Dec 2024 18:14:35 GMT</pubDate>
  </item>
    </channel>
  </rss>